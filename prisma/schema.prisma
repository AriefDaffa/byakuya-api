
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  privateChats  PrivateChatUser[]
  groupChats    GroupChatUser[]
  messages      Message[]

  @@unique([email])
  @@map("user")
}

model PrivateChat {
  id        String            @id
  createdAt DateTime          @default(now())
  users     PrivateChatUser[]
  messages  Message[]
}

model PrivateChatUser {
  id            String @id
  userId        String
  privateChatId String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  privateChat PrivateChat @relation(fields: [privateChatId], references: [id], onDelete: Cascade)

  @@unique([userId, privateChatId])
}

model GroupChat {
  id        String          @id
  name      String
  createdAt DateTime        @default(now())
  users     GroupChatUser[]
  messages  Message[]
}

model GroupChatUser {
  id          String @id
  userId      String
  groupChatId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupChat GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)

  @@unique([userId, groupChatId])
}

model Message {
  id            String   @id
  senderId      String
  privateChatId String?
  groupChatId   String?
  content       String
  createdAt     DateTime @default(now())

  sender      User         @relation(fields: [senderId], references: [id])
  privateChat PrivateChat? @relation(fields: [privateChatId], references: [id])
  groupChat   GroupChat?   @relation(fields: [groupChatId], references: [id])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
