generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String            @id @default(cuid()) // Auto-generate a CUID for the ID
  name          String
  email         String            @unique
  emailVerified Boolean
  image         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  sessions      Session[]
  accounts      Account[]
  privateChats  PrivateChatUser[]
  groupChats    GroupChatUser[]
  messages      Message[]

  @@map("user")
}

model PrivateChat {
  id        String            @id @default(cuid())
  createdAt DateTime          @default(now())
  users     PrivateChatUser[]
  messages  Message[]
}

model PrivateChatUser {
  id            String @id @default(cuid())
  userId        String
  privateChatId String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  privateChat PrivateChat @relation(fields: [privateChatId], references: [id], onDelete: Cascade)

  @@unique([userId, privateChatId])
}

model GroupChat {
  id        String          @id @default(cuid())
  name      String
  createdAt DateTime        @default(now())
  users     GroupChatUser[]
  messages  Message[]
}

model GroupChatUser {
  id          String @id @default(cuid())
  userId      String
  groupChatId String

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  groupChat GroupChat @relation(fields: [groupChatId], references: [id], onDelete: Cascade)

  @@unique([userId, groupChatId])
}

model Message {
  id        String   @id @default(uuid())
  senderId  String
  content   String
  createdAt DateTime @default(now())

  privateChatId String?
  privateChat   PrivateChat? @relation(fields: [privateChatId], references: [id])

  groupChatId String?
  groupChat   GroupChat? @relation(fields: [groupChatId], references: [id])

  seenBy SeenMessage[]
  User   User?         @relation(fields: [userId], references: [id])
  userId String?
}

model SeenMessage {
  id        String  @id @default(uuid())
  userId    String
  messageId String
  message   Message @relation(fields: [messageId], references: [id])
}

model Session {
  id        String   @id @default(cuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}
